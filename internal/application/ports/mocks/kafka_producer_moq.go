// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/saltpay/go-kafka-driver"
	"github.com/saltpay/transaction-card-validator/internal/application/ports"
	"sync"
)

// Ensure, that ProducerMock does implement ports.Producer.
// If this is not the case, regenerate this file with moq.
var _ ports.Producer = &ProducerMock{}

// ProducerMock is a mock implementation of ports.Producer.
//
// 	func TestSomethingThatUsesProducer(t *testing.T) {
//
// 		// make and configure a mocked ports.Producer
// 		mockedProducer := &ProducerMock{
// 			WriteMessageFunc: func(ctx context.Context, msg kafka.Message) error {
// 				panic("mock out the WriteMessage method")
// 			},
// 		}
//
// 		// use mockedProducer in code that requires ports.Producer
// 		// and then make assertions.
//
// 	}
type ProducerMock struct {
	// WriteMessageFunc mocks the WriteMessage method.
	WriteMessageFunc func(ctx context.Context, msg kafka.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// WriteMessage holds details about calls to the WriteMessage method.
		WriteMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg kafka.Message
		}
	}
	lockWriteMessage sync.RWMutex
}

// WriteMessage calls WriteMessageFunc.
func (mock *ProducerMock) WriteMessage(ctx context.Context, msg kafka.Message) error {
	if mock.WriteMessageFunc == nil {
		panic("ProducerMock.WriteMessageFunc: method is nil but Producer.WriteMessage was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Msg kafka.Message
	}{
		Ctx: ctx,
		Msg: msg,
	}
	mock.lockWriteMessage.Lock()
	mock.calls.WriteMessage = append(mock.calls.WriteMessage, callInfo)
	mock.lockWriteMessage.Unlock()
	return mock.WriteMessageFunc(ctx, msg)
}

// WriteMessageCalls gets all the calls that were made to WriteMessage.
// Check the length with:
//     len(mockedProducer.WriteMessageCalls())
func (mock *ProducerMock) WriteMessageCalls() []struct {
	Ctx context.Context
	Msg kafka.Message
} {
	var calls []struct {
		Ctx context.Context
		Msg kafka.Message
	}
	mock.lockWriteMessage.RLock()
	calls = mock.calls.WriteMessage
	mock.lockWriteMessage.RUnlock()
	return calls
}
