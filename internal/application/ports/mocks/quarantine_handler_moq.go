// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/saltpay/transaction-card-validator/internal/application/ports"
	"sync"
)

// Ensure, that QuarantineHandlerMock does implement ports.QuarantineHandler.
// If this is not the case, regenerate this file with moq.
var _ ports.QuarantineHandler = &QuarantineHandlerMock{}

// QuarantineHandlerMock is a mock implementation of ports.QuarantineHandler.
//
// 	func TestSomethingThatUsesQuarantineHandler(t *testing.T) {
//
// 		// make and configure a mocked ports.QuarantineHandler
// 		mockedQuarantineHandler := &QuarantineHandlerMock{
// 			UploadObjectFunc: func(topicName string, data []byte) error {
// 				panic("mock out the UploadObject method")
// 			},
// 		}
//
// 		// use mockedQuarantineHandler in code that requires ports.QuarantineHandler
// 		// and then make assertions.
//
// 	}
type QuarantineHandlerMock struct {
	// UploadObjectFunc mocks the UploadObject method.
	UploadObjectFunc func(topicName string, data []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// UploadObject holds details about calls to the UploadObject method.
		UploadObject []struct {
			// TopicName is the topicName argument value.
			TopicName string
			// Data is the data argument value.
			Data []byte
		}
	}
	lockUploadObject sync.RWMutex
}

// UploadObject calls UploadObjectFunc.
func (mock *QuarantineHandlerMock) UploadObject(topicName string, data []byte) error {
	if mock.UploadObjectFunc == nil {
		panic("QuarantineHandlerMock.UploadObjectFunc: method is nil but QuarantineHandler.UploadObject was just called")
	}
	callInfo := struct {
		TopicName string
		Data      []byte
	}{
		TopicName: topicName,
		Data:      data,
	}
	mock.lockUploadObject.Lock()
	mock.calls.UploadObject = append(mock.calls.UploadObject, callInfo)
	mock.lockUploadObject.Unlock()
	return mock.UploadObjectFunc(topicName, data)
}

// UploadObjectCalls gets all the calls that were made to UploadObject.
// Check the length with:
//     len(mockedQuarantineHandler.UploadObjectCalls())
func (mock *QuarantineHandlerMock) UploadObjectCalls() []struct {
	TopicName string
	Data      []byte
} {
	var calls []struct {
		TopicName string
		Data      []byte
	}
	mock.lockUploadObject.RLock()
	calls = mock.calls.UploadObject
	mock.lockUploadObject.RUnlock()
	return calls
}
