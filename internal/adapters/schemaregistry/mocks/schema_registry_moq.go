// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/riferrei/srclient"
	"github.com/saltpay/transaction-card-validator/internal/adapters/schemaregistry"
	"sync"
)

// Ensure, that SchemaRegistryMock does implement schemaregistry.SchemaRegistry.
// If this is not the case, regenerate this file with moq.
var _ schemaregistry.SchemaRegistry = &SchemaRegistryMock{}

// SchemaRegistryMock is a mock implementation of schemaregistry.SchemaRegistry.
//
// 	func TestSomethingThatUsesSchemaRegistry(t *testing.T) {
//
// 		// make and configure a mocked schemaregistry.SchemaRegistry
// 		mockedSchemaRegistry := &SchemaRegistryMock{
// 			GetLatestSchemaFunc: func(subject string) (*srclient.Schema, error) {
// 				panic("mock out the GetLatestSchema method")
// 			},
// 			GetSchemaByVersionFunc: func(subject string, version int) (*srclient.Schema, error) {
// 				panic("mock out the GetSchemaByVersion method")
// 			},
// 		}
//
// 		// use mockedSchemaRegistry in code that requires schemaregistry.SchemaRegistry
// 		// and then make assertions.
//
// 	}
type SchemaRegistryMock struct {
	// GetLatestSchemaFunc mocks the GetLatestSchema method.
	GetLatestSchemaFunc func(subject string) (*srclient.Schema, error)

	// GetSchemaByVersionFunc mocks the GetSchemaByVersion method.
	GetSchemaByVersionFunc func(subject string, version int) (*srclient.Schema, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetLatestSchema holds details about calls to the GetLatestSchema method.
		GetLatestSchema []struct {
			// Subject is the subject argument value.
			Subject string
		}
		// GetSchemaByVersion holds details about calls to the GetSchemaByVersion method.
		GetSchemaByVersion []struct {
			// Subject is the subject argument value.
			Subject string
			// Version is the version argument value.
			Version int
		}
	}
	lockGetLatestSchema    sync.RWMutex
	lockGetSchemaByVersion sync.RWMutex
}

// GetLatestSchema calls GetLatestSchemaFunc.
func (mock *SchemaRegistryMock) GetLatestSchema(subject string) (*srclient.Schema, error) {
	if mock.GetLatestSchemaFunc == nil {
		panic("SchemaRegistryMock.GetLatestSchemaFunc: method is nil but SchemaRegistry.GetLatestSchema was just called")
	}
	callInfo := struct {
		Subject string
	}{
		Subject: subject,
	}
	mock.lockGetLatestSchema.Lock()
	mock.calls.GetLatestSchema = append(mock.calls.GetLatestSchema, callInfo)
	mock.lockGetLatestSchema.Unlock()
	return mock.GetLatestSchemaFunc(subject)
}

// GetLatestSchemaCalls gets all the calls that were made to GetLatestSchema.
// Check the length with:
//     len(mockedSchemaRegistry.GetLatestSchemaCalls())
func (mock *SchemaRegistryMock) GetLatestSchemaCalls() []struct {
	Subject string
} {
	var calls []struct {
		Subject string
	}
	mock.lockGetLatestSchema.RLock()
	calls = mock.calls.GetLatestSchema
	mock.lockGetLatestSchema.RUnlock()
	return calls
}

// GetSchemaByVersion calls GetSchemaByVersionFunc.
func (mock *SchemaRegistryMock) GetSchemaByVersion(subject string, version int) (*srclient.Schema, error) {
	if mock.GetSchemaByVersionFunc == nil {
		panic("SchemaRegistryMock.GetSchemaByVersionFunc: method is nil but SchemaRegistry.GetSchemaByVersion was just called")
	}
	callInfo := struct {
		Subject string
		Version int
	}{
		Subject: subject,
		Version: version,
	}
	mock.lockGetSchemaByVersion.Lock()
	mock.calls.GetSchemaByVersion = append(mock.calls.GetSchemaByVersion, callInfo)
	mock.lockGetSchemaByVersion.Unlock()
	return mock.GetSchemaByVersionFunc(subject, version)
}

// GetSchemaByVersionCalls gets all the calls that were made to GetSchemaByVersion.
// Check the length with:
//     len(mockedSchemaRegistry.GetSchemaByVersionCalls())
func (mock *SchemaRegistryMock) GetSchemaByVersionCalls() []struct {
	Subject string
	Version int
} {
	var calls []struct {
		Subject string
		Version int
	}
	mock.lockGetSchemaByVersion.RLock()
	calls = mock.calls.GetSchemaByVersion
	mock.lockGetSchemaByVersion.RUnlock()
	return calls
}
